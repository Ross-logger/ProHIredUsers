image: docker:latest

services:
  - docker:dind  # Enable Docker-in-Docker

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""  # Disable Docker-in-Docker TLS certificates

stages:
  - build
  - test
  - deploy

before_script:
  - echo "$ENV_FILE" > .env
  - export $(grep -v '^#' .env | xargs)

# Build the Docker image
build-job:
  stage: build
  script:
    - echo "Building the Docker image..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  only:
    - branches

# Run tests using the built Docker image
test-job:
  stage: test
  script:
    - echo "Running tests..."
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker run --rm $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG pytest --junitxml=report.xml
  artifacts:
    reports:
      junit: report.xml  # Save the test report as an artifact
  dependencies:
    - build-job  # Ensure the test job runs only after the image is built

# Deploy the application
deploy-job:
  stage: deploy
  script:
    - docker login -u $CI_DEPLOY_TOKEN_USERNAME -p $CI_DEPLOY_TOKEN_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker-compose up -d --build
  environment:
    name: production
    url: http://your-production-url.com
  only:
    - master